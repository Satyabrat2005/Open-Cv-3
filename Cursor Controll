import cv2
import mediapipe as mp
import pyautogui
import numpy as np
import time
import math

# Mediapipe hands
mp_hands = mp.solutions.hands # type: ignore
hands = mp_hands.Hands(max_num_hands=1)
mp_draw = mp.solutions.drawing_utils # type: ignore

# Screen size
screen_w, screen_h = pyautogui.size()

# Cursor smoothing
prev_x, prev_y = 0, 0
smooth_factor = 0.15 
prediction_factor = 0.3  

# Click cooldown
click_cooldown = 0.5
last_click_time = 0

# Drag state
dragging = False

# Webcam
cap = cv2.VideoCapture(0)
wCam, hCam = 640, 480
cap.set(3, wCam)
cap.set(4, hCam)
frame_margin = 100

def fingers_up(lm_list):
    fingers = []
    fingers.append(lm_list[4][0] > lm_list[3][0])          
    fingers.append(lm_list[8][1] < lm_list[6][1])         
    fingers.append(lm_list[12][1] < lm_list[10][1])        
    fingers.append(lm_list[16][1] < lm_list[14][1])        
    fingers.append(lm_list[20][1] < lm_list[18][1])        
    return fingers

def distance(p1, p2):
    return math.hypot(p1[0]-p2[0], p1[1]-p2[1])

# Previous finger position for prediction
smooth_factor = 0.3      
velocity_smooth = 0.25     
prediction_factor = 0.12    

prev_x, prev_y = 0, 0
velocity_x, velocity_y = 0, 0

while True:
    success, frame = cap.read()
    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    result = hands.process(rgb_frame)
    
    if result.multi_hand_landmarks:
        for handLms in result.multi_hand_landmarks:
            mp_draw.draw_landmarks(frame, handLms, mp_hands.HAND_CONNECTIONS)
            lm_list = [(int(lm.x * wCam), int(lm.y * hCam)) for lm in handLms.landmark]

            index_x, index_y = lm_list[8]
            thumb_x, thumb_y = lm_list[4]

            # Map camera coordinates to screen coordinates
            target_x = np.interp(index_x, [frame_margin, wCam - frame_margin], [0, screen_w])
            target_y = np.interp(index_y, [frame_margin, hCam - frame_margin], [0, screen_h])

            # Slight velocity smoothing (removes micro jitter)
            velocity_x = velocity_x * (1 - velocity_smooth) + (target_x - prev_x) * velocity_smooth
            velocity_y = velocity_y * (1 - velocity_smooth) + (target_y - prev_y) * velocity_smooth

            # Minimal prediction to counter webcam delay
            predicted_x = target_x + velocity_x * prediction_factor
            predicted_y = target_y + velocity_y * prediction_factor

            # Low-latency smoothing
            prev_x = prev_x + (predicted_x - prev_x) * smooth_factor
            prev_y = prev_y + (predicted_y - prev_y) * smooth_factor

            # Move the mouse
            pyautogui.moveTo(prev_x, prev_y, duration=0)  # no extra lag

            # Draw tracking markers
            cv2.circle(frame, (index_x, index_y), 10, (255, 0, 0), cv2.FILLED)
            cv2.circle(frame, (int(prev_x * wCam / screen_w), int(prev_y * hCam / screen_h)), 15, (0, 255, 0), 2)

            # Detect fingers
            fingers = fingers_up(lm_list)

            # Click: index + middle
            if fingers[1] and fingers[2] and not dragging:
                if time.time() - last_click_time > click_cooldown:
                    pyautogui.click()
                    last_click_time = time.time()
                    cv2.circle(frame, (index_x, index_y), 20, (0, 255, 0), cv2.FILLED)

            # Drag: thumb + index pinch
            if distance((index_x, index_y), (thumb_x, thumb_y)) < 40:
                if not dragging:
                    pyautogui.mouseDown()
                    dragging = True
                cv2.circle(frame, (index_x, index_y), 20, (0, 0, 255), cv2.FILLED)
            else:
                if dragging:
                    pyautogui.mouseUp()
                    dragging = False

    cv2.imshow("Lag-Free Smooth Mouse", frame)
    if cv2.waitKey(1) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
